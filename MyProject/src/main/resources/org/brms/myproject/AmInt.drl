package org.brms.myproject;
rule "check age of construction"
when
AmInt(((2018-yearBuilt)>0)&&((2018-yearBuilt)<76))
then
System.out.println("Age is eligible");
//drools.setFocus("Carrier");
end
rule "Check whether have trampoline and is it fenced"
//ruleflow-group "Carrier"	
when	
AmInt((Trampoline==true)&&(Trampolinefence=="yes"))	
then
System.out.println(" Trampoline eligible");
//drools.setFocus("Carrier");
end

rule "Number of prior claims"
//ruleflow-group "Carrier"
when	
AmInt(prior_Claims<1)
then
System.out.println("Number of property claims eligible");
//drools.setFocus("Carrier");
end

rule "Eligibilty for seasonal occupany"
//ruleflow-group "Carrier"	
when
AmInt((secured_community=="Gated with a guard")||(secured_community=="Gated with an automated system"))
then
System.out.println("Flat roof percentage eligible");
//drools.setFocus("Carrier");
end

rule "Check flat roof percentage"
//ruleflow-group "Carrier"
when
AmInt((flatRoofPercent=="1 - 10%")||(flatRoofPercent=="11 - 20%"))
then
System.out.println("Flat roof percentage eligible");
//drools.setFocus("Carrier");
end

rule "Check masonary to frame ratio"
//ruleflow-group "Carrier"
when	
AmInt(masonryFrame=="Masonry 76% or more - Frame 24%")
then
System.out.println("Number of property claims eligible");
end

rule "Check in which year the Plumbing was updated"
ruleflow-group "Carrier"	
when	
AmInt(((2018-plumbingUpdate)>-1)&&((2018-plumbingUpdate)<21))
then
System.out.println(" Plumbing update is eligible");
drools.setFocus("Carrier");
end

rule "Check the type of Plumbing"
ruleflow-group "Carrier"	
when	
AmInt((plumbingType!="Polybutylene")&&(plumbingType!="PEX"))	
then
System.out.println(" Plumbing type is eligible");
drools.setFocus("Carrier");
end

rule "Check the percentage of other structures"
//ruleflow-group "Carrier"
when
AmInt((OtherStructureLimit>1)&&(OtherStructureLimit<21))
then
System.out.println("Other Structure Limit is eleigible");
//drools.setFocus("Carrier");
end

rule "Check quantity of Composition Shingle"
//ruleflow-group "Carrier"	
when
AmInt((CompositionShingle>-1)&&(CompositionShingle<16))	
then
System.out.println(" eligible Composition Shingle");
//drools.setFocus("Carrier");
end

rule "Check quantity of Architectual Shingle"
//ruleflow-group "Carrier"	
when
AmInt((ArchitectualShingle>-1)&&(ArchitectualShingle<21))
then
System.out.println(" eligible Architectual Shingle");
//drools.setFocus("Carrier");
end

rule "Check quantity of Metal"
//ruleflow-group "Carrier"	
when
AmInt((Metal>-1)&&(Metal<41))
then
System.out.println(" eligible metal");
//drools.setFocus("Carrier");
end

rule "Check quantity of Tile"
//ruleflow-group "Carrier"	
when
AmInt((Tile>-1)&&(Tile<41))
then
System.out.println(" eligible tile");
//drools.setFocus("Carrier");
end

rule "Check the No Prior Coverage years"
ruleflow-group "Carrier"	
when
AmInt((NoPriorCoverage>-1)&&(NoPriorCoverage>31))	
then
System.out.println(" Prior coverage is eligible");
//drools.setFocus("Carrier");
end

rule "Check whether have farm animals"
//ruleflow-group "Carrier"	
when
AmInt((FarmAnimals=="yes")||(FarmAnimals=="no"))
then
System.out.println(" Farm animals are eligible");
//drools.setFocus("Carrier");
end

rule "Check whether LLC or Corporate Ownership"
//ruleflow-group "Carrier"	
when	
AmInt((LLC=="yes")||(LLC=="no"))	
then
System.out.println(" LLC eligible");
//drools.setFocus("Carrier");
end

rule "Check whether you have Diving Board"
//ruleflow-group "Carrier"	
when	
AmInt((DivingBoard=="yes")||(DivingBoard=="no"))
then
System.out.println(" Diving board eligible");
//drools.setFocus("Carrier");
end

rule "Check whether have pool slide"
ruleflow-group "Carrier"	
when
AmInt((PoolSlide=="yes")||(PoolSlide=="no"))
then
System.out.println(" PoolSlide eligible");
//drools.setFocus("Carrier");
end

rule "Check the water coverage"
//ruleflow-group "Carrier"	
when
AmInt((WaterCoverage>-1)&&(WaterCoverage<41))	
then
System.out.println("Water coverage eligible");
//drools.setFocus("Carrier");
end

rule "Check the insurance score"
//ruleflow-group "Carrier"	
when
AmInt(InsuranceScore=="yes")	
then
System.out.println(" Insurance score eligible");
//drools.setFocus("Carrier");
end

rule "Check whether duplex"
ruleflow-group "Carrier"	
when
AmInt(Duplex=="yes")	
then
System.out.println("Duplex eligible");
//drools.setFocus("Carrier");
end

rule "Check whether more than 2 floors"
//ruleflow-group "Carrier"	
when
AmInt(ThreeUnits=="no")	
then
System.out.println(" Three units eligible");
//drools.setFocus("Carrier");
end

rule "Check the effective year built"
//ruleflow-group "Carrier"	
when
AmInt((EffectiveYearBuilt=="yes")||(EffectiveYearBuilt=="no"))	
then
System.out.println(" Effective year built eligible");
//drools.setFocus("Carrier");
end


/*rule "Dog Policy eligibility for dog breeds"
ruleflow-group "Carrier"	
when
AmInt((dogBreeds!="Pit Bull")&&(dogBreeds!="Staffordshire Terrier")&&(dogBreeds!="Wolf Hybrid"))
then
System.out.println(" Dog breeds are eligible");
drools.setFocus("Carrier");
end

rule "Endorsement Eligibility	for dog breeds"
ruleflow-group "Carrier"	
when
AmInt((dogBreeds!="Pit Bull")&&(dogBreeds!="Staffordshire Terrier")&&(dogBreeds!="Wolf Hybrid"))	
then
System.out.println(" Dog breeds are eligible fro endorsement");
end*/