package org.brms.myproject;
rule "check age of construction"
when
AmInt(Age:(2018-yearBuilt))
AmInt(((2018-yearBuilt)>0)&&((2018-yearBuilt)<76))
then
System.out.println("Age is eligible");
drools.setFocus("Carrier");
end

rule "Check the dwelling coverage" 
ruleflow-group "Carrier"
when
AmInt((DwellingCoverage>149999)&&(DwellingCoverage<1500001))
then
System.out.println("Dwelling coverage is eligible");
drools.setFocus("Carrier");
end

rule "Check the percentage of other structures"
ruleflow-group "Carrier"
when
AmInt((OtherStructureLimit>1)&&(OtherStructureLimit<21))
then
System.out.println("Other Structure Limit is eleigible");
drools.setFocus("Carrier");
end

rule "Protection Class 9 is eligible"
ruleflow-group "Carrier"
when
AmInt((Acres>-1)&&(Acres<5))
then
System.out.println("Protection Class 9 is eligible");
drools.setFocus("Carrier");
end

rule "Protected Subdivision is present"
ruleflow-group "Carrier"	
when	
AmInt(ProtectedSubdivision=="yes")	
then
System.out.println("Rates as PC 6");
drools.setFocus("Carrier");
end

rule "Number of property claims"
ruleflow-group "Carrier"
when	
AmInt(PropertyClaims<1)
then
System.out.println("Property claims eligible");
drools.setFocus("Carrier");
end

rule "Check for Secondary/Seasonal Occupancy(Central Station Fire and Burglar or Limited Access (security guard or gate)"
ruleflow-group "Carrier"
when	
AmInt((Protection=="security")||(Protection=="gate"))
then
System.out.println("Secondary/seasonal occupancy eligible");
drools.setFocus("Carrier");
end

rule "Check quantity of Composition Shingle"
ruleflow-group "Carrier"	
when
AmInt((CompositionShingle>-1)&&(CompositionShingle<16))	
then
System.out.println(" eligible Composition Shingle");
drools.setFocus("Carrier");
end

rule "Check quantity of Architectual Shingle"
ruleflow-group "Carrier"	
when
AmInt((ArchitectualShingle>-1)&&(ArchitectualShingle<21))
then
System.out.println(" eligible Architectual Shingle");
drools.setFocus("Carrier");
end

rule "Check quantity of Metal"
ruleflow-group "Carrier"	
when
AmInt((Metal>-1)&&(Metal<41))
then
System.out.println(" eligible metal");
drools.setFocus("Carrier");
end

rule "Check quantity of Tile"
ruleflow-group "Carrier"	
when
AmInt((Tile>-1)&&(Tile<41))
then
System.out.println(" eligible tile");
drools.setFocus("Carrier");
end

rule "Check the Flat roof percentage"
ruleflow-group "Carrier"	
when
AmInt((FlatRoof>-1)&&(FlatRoof<21))
then
System.out.println(" Flat Roof percentage is eligible");
drools.setFocus("Carrier");
end

rule "Check quantity of HVAC Update"
ruleflow-group "Carrier"	
when
AmInt((HvacUpdate>-1)&&(HvacUpdate>21))
then
System.out.println(" HVAC Update is eligible");
drools.setFocus("Carrier");
end

rule "Check quantity of Electrical Update"
ruleflow-group "Carrier"	
when	
AmInt((ElectricalUpdate>-1)&&(ElectricalUpdate>21))	
then
System.out.println("Electrical update is eligible");
drools.setFocus("Carrier");
end

rule "Check Aluminium type"
ruleflow-group "Carrier"	
when	
AmInt((ElectricAluminum=="copalum")||(ElectricAluminum=="alumiconn"))
then
System.out.println(" Electric aluminium fixture is eligible");
drools.setFocus("Carrier");
end

rule "Check Electric Brand"
ruleflow-group "Carrier"	
when		
AmInt((ElectricBrand!="Federal-Pacific")&&(ElectricBrand!="Stab-Loc")&&(ElectricBrand!="Zinsco")&&(ElectricBrand!="Challenger")&&(ElectricBrand!="Sylvania"))
then
System.out.println("Electric brand is eligible");
drools.setFocus("Carrier");
end

rule "Check the Electrical Amperes"
ruleflow-group "Carrier"	
when		
AmInt(ElectricAmps>100)
then
System.out.println(" Electric amperes is eligible");
drools.setFocus("Carrier");
end

rule "Check the Plumbing update"
ruleflow-group "Carrier"	
when	
AmInt((PlumbingUpdate>-1)&&(PlumbingUpdate<21))
then
System.out.println(" Plumbing update is eligible");
drools.setFocus("Carrier");
end

rule "Check the Plumbing type"
ruleflow-group "Carrier"	
when	
AmInt((PlumbingType!="Polybutylene")||(PlumbingType!="PEX"))	
then
System.out.println(" Plumbing type is eligible");
drools.setFocus("Carrier");
end

rule "Check the No Prior Coverage years"
ruleflow-group "Carrier"	
when
AmInt((NoPriorCoverage>-1)&&(NoPriorCoverage>31))	
then
System.out.println(" Prior coverage is eligible");
drools.setFocus("Carrier");
end

rule "Check the Dog Policy eligibily for dog breeds"
ruleflow-group "Carrier"	
when
AmInt((DogBreeds!="Pit Bull")&&(DogBreeds!="Staffordshire Terrier")&&(DogBreeds!="Wolf"))
then
System.out.println(" Dog breeds are eligible");
drools.setFocus("Carrier");
end

rule "Check the Endorsement Eligibility	for dog breeds"
ruleflow-group "Carrier"	
when
AmInt((DogBreeds!="Pit Bull")&&(DogBreeds!="Staffordshire Terrier")&&(DogBreeds!="Wolf"))
then
System.out.println(" Dog breeds are eligible fro endorsement");
drools.setFocus("Carrier");
end

rule "Check the Flood insurance Required in Flood Zone?"
ruleflow-group "Carrier"	
when
AmInt(FloodZone=="yes")
then
System.out.println(" Flood insurance eligible");
drools.setFocus("Carrier");
end

rule "Check whether have trampoline and is it fenced"
ruleflow-group "Carrier"	
when	
AmInt((Trampoline=="yes")&&(Trampolinefence=="yes"))	
then
System.out.println(" Trampoline eligible");
drools.setFocus("Carrier");
end

rule "Check the four point requirement"
ruleflow-group "Carrier"	
when
AmInt((FourPointRequirement>-1)&&(FourPointRequirement<40))	
then
System.out.println("Four point requirement eligible");
drools.setFocus("Carrier");
end

rule "Check the water coverage"
ruleflow-group "Carrier"	
when
AmInt((WaterCoverage>-1)&&(WaterCoverage<41))	
then
System.out.println("Water coverage eligible");
drools.setFocus("Carrier");
end

rule "Check the roof over"
ruleflow-group "Carrier"	
when
AmInt(Shingles==2)	
then
System.out.println(" Roof over shingles eligible");
drools.setFocus("Carrier");
end

rule "Check the insurance score"
ruleflow-group "Carrier"	
when
AmInt(InsuranceScore=="yes")	
then
System.out.println(" Insurance score eligible");
drools.setFocus("Carrier");
end

rule "Check whether duplex"
ruleflow-group "Carrier"	
when
AmInt(Duplex=="yes")	
then
System.out.println("Duplex eligible");
drools.setFocus("Carrier");
end

rule "Check whether more than 2 floors"
ruleflow-group "Carrier"	
when
AmInt(ThreeUnits=="no")	
then
System.out.println(" Three units eligible");
drools.setFocus("Carrier");
end

rule "Check type of hardiplank"
ruleflow-group "Carrier"	
when
AmInt(Hardiplank=="frame")
then
drools.setFocus("Carrier");
end

rule "Check the Masonry to Frame Ratio"
ruleflow-group "Carrier"	
when			
AmInt(FrameRate==33.3)
then
System.out.println("Frame rate eligible");
System.out.println("Approved");
end
