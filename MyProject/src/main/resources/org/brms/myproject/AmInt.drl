package org.brms.myproject;
rule "Check fro the garage type to get other structure eligibilty"
when
AmInt((GarageType=="detachedSeperatedtructureWithoutLivingSpace")||(GarageType=="attachedToTheMainHouse"))
then
System.out.println("@ Other Structure limit eligible");
end
rule "check age of construction"
when
AmInt(((2018-yearBuilt)>0)&&((2018-yearBuilt)<76))
then
System.out.println("@ Age is eligible");
end
rule "Check whether have trampoline and is it fenced"
when	
AmInt((Trampoline==true)&&(Trampolinefence=="yes"))	
then
System.out.println("@ Trampoline eligible");
end

rule "Number of prior claims"
when	
AmInt(prior_Claims<1)
then
System.out.println("@ Number of property claims eligible");
end

rule "Eligibilty for seasonal occupany"
when
AmInt((secured_community=="Gated with a guard")||(secured_community=="Gated with an automated system"))
then
System.out.println("@ Secondary/Seasonal Occupancy eligible");
end

rule "Check flat roof percentage"
when
AmInt((flatRoofPercent=="1 - 10%")||(flatRoofPercent=="11 - 20%"))
then
System.out.println("@ Flat roof percentage eligible");
end

rule "Check masonary to frame ratio"
when	
AmInt(masonryFrame=="Masonry 76% or more - Frame 24%")
then
System.out.println("@ Masonary frame ratio eligible");
end

/*rule "Check the percentage of other structures"
when
AmInt((OtherStructureLimit>1)&&(OtherStructureLimit<21))
then
System.out.println("@ Other Structure Limit is eleigible");
end
*/
rule "Check quantity of Composition Shingle"
when
AmInt((RoofMaterial=="CompositionShingle")&&((2018-yearBuilt)>-1)&&((2018-yearBuilt)<16))	
then
System.out.println("@ eligible Composition Shingle");
end

rule "Check quantity of Architectual Shingle"
when
AmInt((RoofMaterial=="ArchitectualShingle")&&((2018-yearBuilt)>-1)&&((2018-yearBuilt)<21))
then
System.out.println("@ eligible Architectual Shingle");
end

rule "Check quantity of Metal"
when
AmInt((RoofMaterial=="Metal")&&((2018-yearBuilt)>-1)&&((2018-yearBuilt)<41))
then
System.out.println("@ eligible metal");
end

rule "Check quantity of Tile"
when
AmInt((RoofMaterial=="Tile")&&((2018-yearBuilt)>-1)&&((2018-yearBuilt)<41))
then
System.out.println("@ eligible tile");
end

rule "Check the No Prior Coverage years"
when
AmInt((NoPriorCoverage>-1)&&(NoPriorCoverage>31))	
then
System.out.println("@  Prior coverage is eligible");
end

rule "Check whether have farm animals"
when
AmInt(FarmAnimals==true)
then
System.out.println("@ Farm animals are eligible");
end

rule "Check whether LLC or Corporate Ownership"
when	
AmInt((LLC=="yes")||(LLC=="no"))	
then
System.out.println("@ LLC eligible");
end

rule "Check whether you have Diving Board"
when	
AmInt((DivingBoard=="yes")||(DivingBoard=="no"))
then
System.out.println("@ Diving board eligible");
end

rule "Check whether have pool slide"
when
AmInt((PoolSlide=="yes")||(PoolSlide=="no"))
then
System.out.println("@ PoolSlide eligible");
end

rule "Check whether duplex"
when
AmInt((structureType=="Duplex")&&(structureType!=null))	
then
System.out.println("@ Duplex is eligible");
end

rule "Check the Plumbing update year"
when	
AmInt(((2018-PlumbingUpdate)>-1)&&((2018-PlumbingUpdate)<21))
then
System.out.println("@ Plumbing update is eligible");
end

rule "Check what is the Plumbing type"
when	
AmInt((PlumbingType!=null)&&(PlumbingType!="Polybutylene")&&(PlumbingType!="PEX"))	
then
System.out.println("@ Plumbing type is eligible");
end

rule "Check the water coverage"
when
AmInt((WaterCoverage>-1)&&(WaterCoverage<41))	
then
System.out.println("@ Water coverage eligible");
end

rule "Check the insurance score"
when
AmInt(InsuranceScore=="yes")	
then
System.out.println("@ Insurance score eligible");
end

/*rule "Check whether more than 2 floors"
when
AmInt((structureType!=null)&&(structureType!="ThreeUnits")&&(structureType!="Duplex"))	
then
System.out.println("@ Not more than 2 units eligible");
end
*/
rule "Check the effective year built"
when
AmInt((EffectiveYearBuilt=="yes")||(EffectiveYearBuilt=="no"))	
then
System.out.println("@ Effective year built eligible");
end

rule "Dog Policy eligibility for dog breeds"
when
AmInt((dogBreed!=null)&&(dogBreed!="Pit_Bull")&&(dogBreed!="Staffordshire_Terrier")&&(dogBreed!="Wolf_Hybrid"))
then
System.out.println("@ Dog breeds are eligible");
end
/*
rule "Endorsement Eligibility	for dog breeds"
when
AmInt((dogBreeds!=null)&&(dogBreeds!="Pit Bull")&&(dogBreeds!="Staffordshire Terrier")&&(dogBreeds!="Wolf Hybrid"))	
then
System.out.println("@ Dog breeds are eligible for endorsement");
end*/